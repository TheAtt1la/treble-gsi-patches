From 45949f4e9c179b9537e2c64bc10bfcd27d79f27e Mon Sep 17 00:00:00 2001
From: TheAtt1la <alittauwu@gmail.com>
Date: Wed, 17 May 2023 02:12:31 +0000
Subject: [PATCH 4/5] Revert udfps: Implement framework dimming support

---
 packages/SystemUI/res/values/derp_config.xml  | 36 --------
 .../systemui/biometrics/UdfpsController.java  | 87 +------------------
 .../biometrics/UdfpsControllerOverlay.kt      | 11 +--
 3 files changed, 4 insertions(+), 130 deletions(-)

diff --git a/packages/SystemUI/res/values/derp_config.xml b/packages/SystemUI/res/values/derp_config.xml
index af575b861d5b..c6d4103508ab 100644
--- a/packages/SystemUI/res/values/derp_config.xml
+++ b/packages/SystemUI/res/values/derp_config.xml
@@ -33,40 +33,4 @@
 
     <!-- Whether show refresh rate QS tile -->
     <bool name="config_showRefreshRateQsTile">false</bool>
-
-    <!-- Flag to enable framework dimming for udfps -->
-    <bool name="config_udfpsFrameworkDimming">false</bool>
-
-    <!-- Array of brightness-alpha lut for framework dimming -->
-    <string-array name="config_udfpsDimmingBrightnessAlphaArray" translatable="false">
-          <!-- Example:
-          <item>0,255</item>
-          <item>1,234</item>
-          <item>3,227</item>
-          <item>8,208</item>
-          <item>16,192</item>
-          <item>27,176</item>
-          <item>41,160</item>
-          <item>61,144</item>
-          <item>80,128</item>
-          <item>104,112</item>
-          <item>130,96</item>
-          <item>158,80</item>
-          <item>188,64</item>
-          <item>221,48</item>
-          <item>250,36</item>
-          <item>255,33</item>
-          -->
-    </string-array>
-
-    <!-- Brightness range min for udfps dimming -->
-    <integer name="config_udfpsDimmingBrightnessMin">0</integer>
-
-    <!-- Brightness range max for udfps dimming -->
-    <integer name="config_udfpsDimmingBrightnessMax">0</integer>
-
-    <!-- The amount of delay to add when disabling the dimming.
-         This is used to prevent flickers due to the dimming being disabled
-         before the screen has had chance to switch out of HBM mode -->
-    <integer name="config_udfpsDimmingDisableDelay">0</integer>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 3a367994d141..0329ca2490c6 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -74,7 +74,6 @@ import com.android.systemui.Dumpable;
 import com.android.systemui.R;
 import com.android.systemui.animation.ActivityLaunchAnimator;
 import com.android.systemui.biometrics.dagger.BiometricsBackground;
-import com.android.systemui.biometrics.UdfpsControllerOverlay;
 import com.android.systemui.biometrics.udfps.InteractionEvent;
 import com.android.systemui.biometrics.udfps.NormalizedTouchData;
 import com.android.systemui.biometrics.udfps.SinglePointerTouchProcessor;
@@ -90,7 +89,6 @@ import com.android.systemui.keyguard.ScreenLifecycle;
 import com.android.systemui.keyguard.domain.interactor.PrimaryBouncerInteractor;
 import com.android.systemui.plugins.FalsingManager;
 import com.android.systemui.plugins.statusbar.StatusBarStateController;
-import com.android.systemui.R;
 import com.android.systemui.shade.ShadeExpansionStateManager;
 import com.android.systemui.statusbar.LockscreenShadeTransitionController;
 import com.android.systemui.statusbar.VibratorHelper;
@@ -215,9 +213,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     private boolean mIsPerfLockAcquired = false;
     private static final int BOOST_DURATION_TIMEOUT = 2000;
 
-    private boolean mFrameworkDimming;
-    private int[][] mBrightnessAlphaArray;
-
     @VisibleForTesting
     public static final VibrationAttributes UDFPS_VIBRATION_ATTRIBUTES =
             new VibrationAttributes.Builder()
@@ -284,6 +279,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
                     Log.d(TAG, "hiding udfps overlay when "
                             + "mKeyguardUpdateMonitor.isFingerprintDetectionRunning()=true");
                 }
+
                 UdfpsController.this.hideUdfpsOverlay();
             });
         }
@@ -909,8 +905,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
 
     private void showUdfpsOverlay(@NonNull UdfpsControllerOverlay overlay) {
         mExecution.assertIsMainThread();
-        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
-        parseBrightnessAlphaArray();
 
         mOverlay = overlay;
         final int requestReason = overlay.getRequestReason();
@@ -1070,62 +1064,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         return mSensorProps.sensorType == FingerprintSensorProperties.TYPE_UDFPS_OPTICAL;
     }
 
-    private static int interpolate(int x, int xa, int xb, int ya, int yb) {
-        return ya - (ya - yb) * (x - xa) / (xb - xa);
-    }
-
-    private int getBrightness() {
-        int brightness = Settings.System.getInt(mContext.getContentResolver(),
-                    Settings.System.SCREEN_BRIGHTNESS, 100);
-        // Since the brightness is taken from the system settings, we need to interpolate it
-        final int brightnessMin = mContext.getResources().getInteger(R.integer.config_udfpsDimmingBrightnessMin);
-        final int brightnessMax = mContext.getResources().getInteger(R.integer.config_udfpsDimmingBrightnessMax);
-        if (brightnessMax > 0) {
-            brightness = interpolate(brightness, 0, 255, brightnessMin, brightnessMax);
-        }
-        return brightness;
-    }
-
-    private void updateViewDimAmount(boolean pressed) {
-        if (mFrameworkDimming) {
-            if (pressed) {
-                int curBrightness = getBrightness();
-                int i, dimAmount;
-                for (i = 0; i < mBrightnessAlphaArray.length; i++) {
-                    if (mBrightnessAlphaArray[i][0] >= curBrightness) break;
-                }
-                if (i == 0) {
-                    dimAmount = mBrightnessAlphaArray[i][1];
-                } else if (i == mBrightnessAlphaArray.length) {
-                    dimAmount = mBrightnessAlphaArray[i-1][1];
-                } else {
-                    dimAmount = interpolate(curBrightness,
-                            mBrightnessAlphaArray[i][0], mBrightnessAlphaArray[i-1][0],
-                            mBrightnessAlphaArray[i][1], mBrightnessAlphaArray[i-1][1]);
-                }
-                // Call the function in UdfpsOverlayController with dimAmount
-                mOverlay.updateDimAmount(dimAmount / 255.0f);
-            } else {
-                // Call the function in UdfpsOverlayController with dimAmount
-                mOverlay.updateDimAmount(0.0f);
-            }
-        }
-    }
-
-    private void parseBrightnessAlphaArray() {
-        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
-        if (mFrameworkDimming) {
-            String[] array = mContext.getResources().getStringArray(
-                    R.array.config_udfpsDimmingBrightnessAlphaArray);
-            mBrightnessAlphaArray = new int[array.length][2];
-            for (int i = 0; i < array.length; i++) {
-                String[] s = array[i].split(",");
-                mBrightnessAlphaArray[i][0] = Integer.parseInt(s[0]);
-                mBrightnessAlphaArray[i][1] = Integer.parseInt(s[1]);
-            }
-        }
-    }
-
     public synchronized boolean isFingerDown() {
         return mOnFingerDown;
     }
@@ -1166,9 +1104,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             Log.w(TAG, "Null request in onFingerDown");
             return;
         }
-
-        updateViewDimAmount(true);
-
         if (!mOverlay.matchesRequestId(requestId)) {
             Log.w(TAG, "Mismatched fingerDown: " + requestId
                     + " current: " + mOverlay.getRequestId());
@@ -1292,25 +1227,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         }
         cancelAodSendFingerUpAction();
 
-        // Add a delay to ensure that the dim amount is updated after the display
-        // has had chance to switch out of HBM mode.
-        // The delay, in ms is stored in config_udfpsDimmingDisableDelay.
-        // If the delay is 0, the dim amount will be updated immediately.
-        final int delay = mContext.getResources().getInteger(
-                R.integer.config_udfpsDimmingDisableDelay);
-        if (delay > 0) {
-            mFgExecutor.executeDelayed(() -> {
-                // A race condition exists where the overlay is destroyed before the the dim amount is updated.
-                // This check ensures that the overlay is still valid.
-                if (mOverlay != null && mOverlay.matchesRequestId(requestId)) {
-                    updateViewDimAmount(false);
-                }
-            }, delay);
-        } else {
-            updateViewDimAmount(false);
-        }
-
-        if (mPerf != null && mIsPerfLockAcquired) {
+            if (mPerf != null && mIsPerfLockAcquired) {
             mPerf.perfLockRelease();
             mIsPerfLockAcquired = false;
         }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
index 322936190b95..8db4927ee059 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
@@ -117,10 +117,9 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
         fitInsetsTypes = 0
         gravity = android.view.Gravity.TOP or android.view.Gravity.LEFT
         layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS
-        flags = (Utils.FINGERPRINT_OVERLAY_LAYOUT_PARAM_FLAGS or WindowManager.LayoutParams.FLAG_DIM_BEHIND
-            or WindowManager.LayoutParams.FLAG_SPLIT_TOUCH)
+        flags = (Utils.FINGERPRINT_OVERLAY_LAYOUT_PARAM_FLAGS or
+                WindowManager.LayoutParams.FLAG_SPLIT_TOUCH)
         privateFlags = WindowManager.LayoutParams.PRIVATE_FLAG_TRUSTED_OVERLAY
-        dimAmount = 0.0f
         // Avoid announcing window title.
         accessibilityTitle = " "
 
@@ -129,12 +128,6 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
         }
     }
 
-    fun updateDimAmount(newDimAmount: Float): Float {
-        coreLayoutParams.dimAmount = newDimAmount
-        windowManager.updateViewLayout(overlayView, coreLayoutParams)
-        return newDimAmount
-    }
-
     /** A helper if the [requestReason] was due to enrollment. */
     val enrollHelper: UdfpsEnrollHelper? =
         if (requestReason.isEnrollmentReason() && !shouldRemoveEnrollmentUi()) {
-- 
2.34.1

